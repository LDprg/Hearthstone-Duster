(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global['hearthstonejson-client'] = {})));
}(this, (function (exports) { 'use strict';

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var browser = createCommonjsModule(function (module, exports) {
module.exports = exports = window.fetch;
exports.Headers = window.Headers;
exports.Request = window.Request;
exports.Response = window.Response;
});

var browser_1 = browser.Headers;
var browser_2 = browser.Request;
var browser_3 = browser.Response;

var HearthstoneJSON = /** @class */ (function () {
    function HearthstoneJSON() {
        var _this = this;
        this.endpoint = "https://api.hearthstonejson.com/v1/";
        this.defaultLocale = "enUS";
        this.fallback = null;
        this.createUrl = function (build, locale) {
            return _this.endpoint + build + "/" + locale + "/cards.json";
        };
    }
    HearthstoneJSON.prototype.get = function (build, locale) {
        var _this = this;
        if (build === "latest") {
            return this.getLatest(locale);
        }
        var _locale = locale ? locale : this.defaultLocale;
        this.fallback = false;
        return this.fetchSpecificBuild(build, _locale).catch(function () {
            _this.fallback = true;
            return _this.fetchLatestBuild(_locale);
        });
    };
    HearthstoneJSON.prototype.getLatest = function (locale) {
        if (!locale) {
            locale = this.defaultLocale;
        }
        this.fallback = false;
        return this.fetchLatestBuild(locale);
    };
    HearthstoneJSON.prototype.fetchBuild = function (build, locale) {
        var headers = new Headers();
        headers.set("accept", "application/json; charset=utf-8");
        return fetch(this.createUrl(build, locale), {
            method: "GET",
            mode: "cors",
            headers: headers,
        }).then(function (response) {
            var statusCode = response.status;
            if (statusCode !== 200) {
                throw new Error("Expected status code 200, got " + statusCode);
            }
            return response.json();
        });
    };
    HearthstoneJSON.prototype.fetchSpecificBuild = function (build, locale) {
        return this.fetchBuild(build, locale);
    };
    HearthstoneJSON.prototype.fetchLatestBuild = function (locale) {
        return this.fetchBuild("latest", locale);
    };
    return HearthstoneJSON;
}());

var MercenariesJSON = /** @class */ (function () {
    function MercenariesJSON() {
        var _this = this;
        this.endpoint = "https://api.hearthstonejson.com/v1/";
        this.defaultLocale = "enUS";
        this.fallback = null;
        this.createUrl = function (build, locale) {
            return _this.endpoint + build + "/" + locale + "/mercenaries.json";
        };
    }
    MercenariesJSON.prototype.get = function (build, locale) {
        var _this = this;
        if (build === "latest") {
            return this.getLatest(locale);
        }
        var _locale = locale ? locale : this.defaultLocale;
        this.fallback = false;
        return this.fetchSpecificBuild(build, _locale).catch(function () {
            _this.fallback = true;
            return _this.fetchLatestBuild(_locale);
        });
    };
    MercenariesJSON.prototype.getLatest = function (locale) {
        if (!locale) {
            locale = this.defaultLocale;
        }
        this.fallback = false;
        return this.fetchLatestBuild(locale);
    };
    MercenariesJSON.prototype.fetchBuild = function (build, locale) {
        var headers = new Headers();
        headers.set("accept", "application/json; charset=utf-8");
        return fetch(this.createUrl(build, locale), {
            method: "GET",
            mode: "cors",
            headers: headers,
        }).then(function (response) {
            var statusCode = response.status;
            if (statusCode !== 200) {
                throw new Error("Expected status code 200, got " + statusCode);
            }
            return response.json();
        });
    };
    MercenariesJSON.prototype.fetchSpecificBuild = function (build, locale) {
        return this.fetchBuild(build, locale);
    };
    MercenariesJSON.prototype.fetchLatestBuild = function (locale) {
        return this.fetchBuild("latest", locale);
    };
    return MercenariesJSON;
}());

exports.default = HearthstoneJSON;
exports.MercenariesJSON = MercenariesJSON;

Object.defineProperty(exports, '__esModule', { value: true });

})));
